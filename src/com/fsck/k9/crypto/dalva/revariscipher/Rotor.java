/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fsck.k9.crypto.dalva.revariscipher;


/**
 *
 * @author Dalva
 */
public class Rotor {
	
	public static final char[] R0 = {91, 45, 42, 191, 33, 87, 170, 130, 54, 246, 234, 216, 208, 252, 151, 239, 47, 126, 26, 63, 165, 89, 140, 69, 11, 235, 15, 32, 142, 238, 102, 162, 132, 134, 79, 30, 129, 39, 145, 120, 82, 249, 153, 65, 124, 56, 49, 7, 51, 98, 178, 101, 169, 72, 251, 189, 141, 250, 155, 48, 37, 146, 207, 85, 35, 17, 248, 215, 159, 210, 147, 237, 16, 229, 18, 10, 144, 94, 196, 2, 219, 183, 209, 233, 68, 55, 133, 74, 166, 117, 180, 0, 61, 119, 20, 97, 204, 203, 108, 148, 84, 127, 81, 186, 80, 106, 31, 200, 253, 77, 214, 53, 199, 128, 212, 131, 240, 111, 202, 187, 116, 158, 58, 167, 73, 90, 135, 60, 9, 157, 96, 38, 1, 59, 184, 195, 76, 179, 3, 22, 197, 213, 188, 149, 182, 52, 160, 217, 222, 225, 78, 105, 211, 13, 177, 154, 110, 71, 244, 223, 168, 125, 254, 25, 115, 5, 228, 19, 92, 36, 243, 220, 152, 121, 6, 67, 113, 174, 218, 57, 192, 137, 224, 161, 190, 231, 107, 198, 176, 104, 227, 232, 139, 93, 99, 28, 245, 150, 46, 230, 34, 118, 201, 29, 66, 185, 27, 8, 221, 172, 21, 206, 123, 50, 40, 95, 194, 236, 75, 175, 163, 70, 138, 43, 143, 181, 255, 122, 226, 205, 23, 41, 88, 164, 12, 14, 24, 83, 156, 103, 114, 112, 193, 247, 86, 241, 171, 109, 44, 4, 64, 100, 173, 136, 242, 62};
	public static final char[] R1 = {239, 182, 117, 213, 116, 164, 149, 150, 250, 54, 63, 88, 185, 103, 242, 246, 87, 53, 215, 64, 152, 5, 252, 176, 189, 227, 3, 95, 115, 96, 22, 137, 165, 125, 122, 255, 89, 82, 50, 75, 134, 195, 179, 153, 240, 224, 67, 200, 180, 187, 40, 127, 76, 173, 78, 42, 45, 225, 71, 81, 58, 135, 86, 100, 193, 161, 167, 197, 36, 169, 186, 112, 204, 148, 238, 7, 121, 8, 198, 245, 160, 80, 233, 191, 177, 62, 130, 10, 93, 253, 113, 23, 131, 247, 119, 138, 106, 21, 228, 123, 194, 102, 210, 90, 13, 12, 155, 92, 120, 181, 38, 97, 207, 203, 47, 174, 4, 17, 18, 49, 59, 178, 219, 101, 158, 118, 237, 61, 208, 37, 48, 39, 139, 248, 171, 34, 147, 222, 69, 65, 249, 2, 205, 114, 33, 244, 241, 192, 190, 24, 202, 163, 220, 232, 26, 19, 94, 157, 235, 218, 154, 217, 109, 162, 70, 143, 105, 6, 223, 74, 44, 52, 79, 14, 41, 172, 124, 73, 216, 209, 212, 35, 184, 151, 133, 226, 43, 27, 146, 128, 9, 145, 156, 107, 30, 25, 126, 29, 183, 230, 243, 188, 28, 144, 141, 168, 16, 15, 201, 199, 159, 57, 98, 214, 136, 99, 111, 0, 132, 11, 221, 140, 51, 60, 170, 166, 175, 31, 236, 254, 85, 68, 55, 231, 83, 66, 234, 108, 229, 46, 20, 1, 142, 251, 91, 77, 129, 206, 211, 196, 104, 72, 84, 32, 56, 110};
	public static final char[] R2 = {243, 48, 50, 210, 164, 55, 57, 90, 143, 173, 79, 239, 227, 136, 124, 153, 80, 250, 102, 28, 16, 51, 211, 242, 133, 120, 247, 175, 225, 160, 189, 60, 122, 154, 146, 94, 123, 125, 12, 37, 18, 237, 34, 103, 165, 224, 192, 172, 203, 241, 73, 13, 52, 212, 98, 7, 236, 238, 31, 200, 244, 137, 220, 135, 127, 62, 231, 199, 251, 25, 93, 157, 195, 75, 180, 214, 187, 152, 113, 255, 221, 139, 106, 235, 190, 87, 41, 130, 182, 191, 141, 89, 61, 163, 112, 110, 230, 23, 215, 198, 99, 179, 128, 0, 176, 58, 70, 168, 162, 213, 119, 8, 17, 117, 193, 35, 96, 81, 30, 169, 204, 14, 42, 92, 15, 217, 219, 240, 228, 19, 44, 39, 185, 174, 40, 223, 77, 232, 177, 47, 218, 222, 116, 186, 38, 46, 206, 91, 178, 49, 149, 29, 69, 10, 207, 2, 184, 245, 188, 67, 132, 194, 208, 134, 145, 158, 121, 45, 108, 181, 82, 84, 74, 126, 216, 3, 209, 171, 254, 11, 109, 101, 72, 65, 253, 246, 118, 68, 105, 201, 150, 104, 33, 64, 26, 161, 21, 229, 54, 167, 63, 114, 234, 88, 56, 166, 202, 5, 97, 32, 151, 24, 115, 131, 107, 53, 205, 196, 9, 148, 170, 71, 111, 85, 183, 249, 20, 1, 233, 36, 155, 252, 4, 147, 78, 140, 100, 142, 129, 156, 66, 95, 76, 83, 138, 22, 59, 144, 86, 27, 197, 43, 226, 159, 248, 6};
	public static final char[] R3 = {146, 12, 231, 126, 207, 142, 244, 30, 95, 226, 62, 206, 9, 200, 217, 121, 110, 112, 31, 178, 148, 58, 216, 127, 133, 181, 4, 238, 123, 1, 103, 152, 187, 71, 130, 108, 252, 54, 208, 138, 70, 125, 134, 214, 186, 157, 60, 193, 198, 79, 255, 234, 254, 20, 51, 82, 64, 163, 183, 156, 16, 47, 99, 2, 197, 236, 45, 74, 8, 221, 224, 191, 77, 209, 141, 29, 101, 242, 34, 229, 7, 210, 173, 160, 149, 171, 66, 151, 175, 114, 215, 48, 223, 5, 111, 35, 3, 249, 109, 83, 185, 218, 44, 102, 73, 53, 118, 220, 116, 17, 86, 80, 50, 219, 107, 144, 32, 46, 233, 245, 135, 235, 243, 94, 145, 184, 140, 190, 42, 78, 68, 143, 162, 158, 246, 52, 165, 36, 227, 85, 23, 166, 228, 26, 22, 164, 174, 202, 250, 248, 106, 177, 230, 199, 247, 18, 56, 237, 91, 194, 192, 61, 87, 132, 120, 37, 169, 21, 67, 65, 128, 33, 179, 84, 55, 211, 240, 253, 167, 25, 28, 203, 113, 180, 90, 196, 205, 69, 239, 75, 39, 115, 153, 96, 159, 131, 117, 170, 63, 161, 213, 154, 139, 222, 155, 81, 14, 6, 225, 172, 93, 147, 89, 0, 195, 76, 88, 72, 124, 105, 168, 10, 38, 212, 189, 129, 92, 204, 188, 201, 100, 98, 13, 11, 24, 41, 57, 136, 43, 241, 119, 232, 49, 137, 59, 251, 15, 182, 104, 40, 176, 150, 19, 122, 97, 27};
	public static final char[] R0I = {91, 132, 79, 138, 249, 165, 174, 47, 207, 128, 75, 24, 234, 153, 235, 26, 72, 65, 74, 167, 94, 210, 139, 230, 236, 163, 18, 206, 195, 203, 35, 106, 27, 4, 200, 64, 169, 60, 131, 37, 214, 231, 2, 223, 248, 1, 198, 16, 59, 46, 213, 48, 145, 111, 8, 85, 45, 179, 122, 133, 127, 92, 255, 19, 250, 43, 204, 175, 84, 23, 221, 157, 53, 124, 87, 218, 136, 109, 150, 34, 104, 102, 40, 237, 100, 63, 244, 5, 232, 21, 125, 0, 168, 193, 77, 215, 130, 95, 49, 194, 251, 51, 30, 239, 189, 151, 105, 186, 98, 247, 156, 117, 241, 176, 240, 164, 120, 89, 201, 93, 39, 173, 227, 212, 44, 161, 17, 101, 113, 36, 7, 115, 32, 86, 33, 126, 253, 181, 222, 192, 22, 56, 28, 224, 76, 38, 61, 70, 99, 143, 197, 14, 172, 42, 155, 58, 238, 129, 121, 68, 146, 183, 31, 220, 233, 20, 88, 123, 160, 52, 6, 246, 209, 252, 177, 219, 188, 154, 50, 137, 90, 225, 144, 81, 134, 205, 103, 119, 142, 55, 184, 3, 180, 242, 216, 135, 78, 140, 187, 112, 107, 202, 118, 97, 96, 229, 211, 62, 12, 82, 69, 152, 114, 141, 110, 67, 11, 147, 178, 80, 171, 208, 148, 159, 182, 149, 228, 190, 166, 73, 199, 185, 191, 83, 10, 25, 217, 71, 29, 15, 116, 245, 254, 170, 158, 196, 9, 243, 66, 41, 57, 54, 13, 108, 162, 226};
	public static final char[] R1I = {217, 241, 141, 26, 116, 21, 167, 75, 77, 190, 87, 219, 105, 104, 173, 207, 206, 117, 118, 155, 240, 97, 30, 91, 149, 195, 154, 187, 202, 197, 194, 227, 253, 144, 135, 181, 68, 129, 110, 131, 50, 174, 55, 186, 170, 56, 239, 114, 130, 119, 38, 222, 171, 17, 9, 232, 254, 211, 60, 120, 223, 127, 85, 10, 19, 139, 235, 46, 231, 138, 164, 58, 251, 177, 169, 39, 52, 245, 54, 172, 81, 59, 37, 234, 252, 230, 62, 16, 11, 36, 103, 244, 107, 88, 156, 27, 29, 111, 212, 215, 63, 123, 101, 13, 250, 166, 96, 193, 237, 162, 255, 216, 71, 90, 143, 28, 4, 2, 125, 94, 108, 76, 34, 99, 176, 33, 196, 51, 189, 246, 86, 92, 218, 184, 40, 61, 214, 31, 95, 132, 221, 204, 242, 165, 203, 191, 188, 136, 73, 6, 7, 183, 20, 43, 160, 106, 192, 157, 124, 210, 80, 65, 163, 151, 5, 32, 225, 66, 205, 69, 224, 134, 175, 53, 115, 226, 23, 84, 121, 42, 48, 109, 1, 198, 182, 12, 70, 49, 201, 24, 148, 83, 147, 64, 100, 41, 249, 67, 78, 209, 47, 208, 150, 113, 72, 142, 247, 112, 128, 179, 102, 248, 180, 3, 213, 18, 178, 161, 159, 122, 152, 220, 137, 168, 45, 57, 185, 25, 98, 238, 199, 233, 153, 82, 236, 158, 228, 126, 74, 0, 44, 146, 14, 200, 145, 79, 15, 93, 133, 140, 8, 243, 22, 89, 229, 35};
	public static final char[] R2I = {103, 227, 155, 175, 232, 207, 255, 55, 111, 218, 153, 179, 38, 51, 121, 124, 20, 112, 40, 129, 226, 196, 245, 97, 211, 69, 194, 249, 19, 151, 118, 58, 209, 192, 42, 115, 229, 39, 144, 131, 134, 86, 122, 251, 130, 167, 145, 139, 1, 149, 2, 21, 52, 215, 198, 5, 204, 6, 105, 246, 31, 92, 65, 200, 193, 183, 240, 159, 187, 152, 106, 221, 182, 50, 172, 73, 242, 136, 234, 10, 16, 117, 170, 243, 171, 223, 248, 85, 203, 91, 7, 147, 123, 70, 35, 241, 116, 208, 54, 100, 236, 181, 18, 43, 191, 188, 82, 214, 168, 180, 95, 222, 94, 78, 201, 212, 142, 113, 186, 110, 25, 166, 32, 36, 14, 37, 173, 64, 102, 238, 87, 213, 160, 24, 163, 63, 13, 61, 244, 81, 235, 90, 237, 8, 247, 164, 34, 233, 219, 150, 190, 210, 77, 15, 33, 230, 239, 71, 165, 253, 29, 195, 108, 93, 4, 44, 205, 199, 107, 119, 220, 177, 47, 9, 133, 27, 104, 138, 148, 101, 74, 169, 88, 224, 156, 132, 143, 76, 158, 30, 84, 89, 46, 114, 161, 72, 217, 250, 99, 67, 59, 189, 206, 48, 120, 216, 146, 154, 162, 176, 3, 22, 53, 109, 75, 98, 174, 125, 140, 126, 62, 80, 141, 135, 45, 28, 252, 12, 128, 197, 96, 66, 137, 228, 202, 83, 56, 41, 57, 11, 127, 49, 23, 0, 60, 157, 185, 26, 254, 225, 17, 68, 231, 184, 178, 79};
	public static final char[] R3I = {213, 29, 63, 96, 26, 93, 207, 80, 68, 12, 221, 233, 1, 232, 206, 246, 60, 109, 155, 252, 53, 167, 144, 140, 234, 179, 143, 255, 180, 75, 7, 18, 116, 171, 78, 95, 137, 165, 222, 190, 249, 235, 128, 238, 102, 66, 117, 61, 91, 242, 112, 54, 135, 105, 37, 174, 156, 236, 21, 244, 46, 161, 10, 198, 56, 169, 86, 168, 130, 187, 40, 33, 217, 104, 67, 189, 215, 72, 129, 49, 111, 205, 55, 99, 173, 139, 110, 162, 216, 212, 184, 158, 226, 210, 123, 8, 193, 254, 231, 62, 230, 76, 103, 30, 248, 219, 150, 114, 35, 98, 16, 94, 17, 182, 89, 191, 108, 196, 106, 240, 164, 15, 253, 28, 218, 41, 3, 23, 170, 225, 34, 195, 163, 24, 42, 120, 237, 243, 39, 202, 126, 74, 5, 131, 115, 124, 0, 211, 20, 84, 251, 87, 31, 192, 201, 204, 59, 45, 133, 194, 83, 199, 132, 57, 145, 136, 141, 178, 220, 166, 197, 85, 209, 82, 146, 88, 250, 151, 19, 172, 183, 25, 247, 58, 125, 100, 44, 32, 228, 224, 127, 71, 160, 47, 159, 214, 185, 64, 48, 153, 13, 229, 147, 181, 227, 186, 11, 4, 38, 73, 81, 175, 223, 200, 43, 90, 22, 14, 101, 113, 107, 69, 203, 92, 70, 208, 9, 138, 142, 79, 152, 2, 241, 118, 51, 121, 65, 157, 27, 188, 176, 239, 77, 122, 6, 119, 134, 154, 149, 97, 148, 245, 36, 177, 52, 50};
	
	public static byte RotSub(byte[] key, char input) throws Exception {
		if (key.length != 2) {
			throw new Exception("Rotor Keysize Mismatch!");
		}
		int selection = KeyOps.SelectionHash(4, key);
		switch (selection) {
			case 0:
				return (byte) R0[(int)input];
			case 1:
				return (byte) R1[(int)input];
			case 2:
				return (byte) R2[(int)input];
			case 3:
				return (byte) R3[(int)input];
			default:
				throw new Exception("Selection hash result not within range!");
		}
	}
	
	public static byte RotDeSub(byte[] key, char input) throws Exception {
		if (key.length != 2) {
			throw new Exception("Rotor Keysize Mismatch!");
		}
		int selection = KeyOps.SelectionHash(4, key);
		switch (selection) {
			case 0:
				return (byte) R0I[(int)input];
			case 1:
				return (byte) R1I[(int)input];
			case 2:
				return (byte) R2I[(int)input];
			case 3:
				return (byte) R3I[(int)input];
			default:
				throw new Exception("Selection hash result not within range!");
		}
	}
	
}
